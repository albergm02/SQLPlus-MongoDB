/*  SESION TRANSACCIONES
9. Escribir un programa en SQL inmerso que gestione la venta de plazas de un viaje
asegurando la ausencia de problemas de concurrencia.


Suponemos que la informacion sobre los asientos libres esta en la tabla TEST:
create table test
(id integer not null primary key,       // id coincide con el numero de plaza (num de asiento) del viaje
libre integer default 1,                // libre vale 1 si la plaza esta libre y 0 si esta ocupada
text varchar(20) default '');           // text contiene un identificador del cliente que ha comprado la plaza

*/

/********** SOLUCION INCORRECTA *********/
/** 
 Es una solucion incorrecta porque no establece un nivel de aislamiento serializable que asegure la ausencia de consultas no repetibles.
 La ejecucion de este programa podria dar lugar al problema de la actualizacion perdida, haciendo que un mismo asiento se vendiese a 
 mas de un usuario

**/

#include <stdio.h>

exec sql include sqlca;

void main ()
{
exec sql begin declare section;
char oracleid []="/";
struct tupla_ {int id, libre; char text[21];} tupla_test;
exec sql end declare section;
int hecho = 0;

exec sql declare micur1 cursor for
select id from test
 where  libre=1;


exec sql connect :oracleid;

printf ("Introduzca el nombre para la reserva: ");
scanf(" %s", &tupla_test.text);

do
{

/* Iniciamos una transaccion de nivel de aislamiento leer comprometido, para consultar las plazas libres sin
   provocar bloqueos que obstaculicen el acceso de otros usuarios
*/

        exec sql open micur1;
        if (sqlca.sqlcode!=0) printf ("OPEN1: %d, %s", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
        exec sql fetch micur1 into :tupla_test.id;
        while (sqlca.sqlcode==0) {
                printf ("El asiento %i esta libre.\n", tupla_test.id);
                exec sql fetch micur1 into :tupla_test.id;
        }
        exec sql close micur1;

        printf ("Introduzca el asiento que desea: ");
        scanf("%i", &tupla_test.id);

/* Seguimos adelante sin pasar a una transacción de nivel de aislamiento serializable (ERROR)
   Está MAL porque no garantizamos que otra transacción no haya cambiado el valor del asiento que leimos inicialmente como libre 
*/

	hecho = 0;
        exec sql update test set libre=0, text=:tupla_test.text where id=:tupla_test.id;
        if (sqlca.sqlcode==0) {
                exec sql commit;
                if (sqlca.sqlcode==0) {
                        hecho = 1;
                        printf ("Operacion realizada. Plaza %i asignada a %s\n",
                                  tupla_test.id, tupla_test.text);
                }
        }
        if (!hecho) {
                exec sql rollback;
                printf ("No ha sido posible asignar ese asiento. Repita la operacion\n");
        }
}
while (!hecho);

exec sql commit work release;
}


